"""
Telegram-–±–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–π —Å hh.ru
–ê–≤—Ç–æ—Ä: –í–∞—à–µ –∏–º—è VaSeBa
–í–µ—Ä—Å–∏—è: 1.0
"""

# –ò–º–ø–æ—Ä—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import os
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from api_token import TOKEN

# –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import pandas as pd
import aiohttp  # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
from dateutil import parser  # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç
from aiogram import Bot, Dispatcher, types, F  # –§—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è Telegram API
from aiogram.filters import Command  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
from aiogram.fsm.context import FSMContext  # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.fsm.state import StatesGroup, State  # –°–∏—Å—Ç–µ–º–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
from aiogram.types import FSInputFile  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
from openpyxl import load_workbook  # –†–∞–±–æ—Ç–∞ —Å Excel
from openpyxl.worksheet.table import Table, TableStyleInfo  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
dp = Dispatcher()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
API_URL = "https://api.hh.ru/vacancies"  # –û—Å–Ω–æ–≤–Ω–æ–π URL API
AREA = 113  # –ö–æ–¥ –†–æ—Å—Å–∏–∏ –≤ API hh.ru
MAX_RETRIES = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
REQUEST_DELAY = 0.25  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
DATE_RANGE_DAYS = 30  # –ü–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞ (–¥–Ω–µ–π)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é Finite State Machine (FSM)
class ParseStates(StatesGroup):
    waiting_for_profession = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏


"""
–ö–ª–∞—Å—Å HHruParser —Ä–µ–∞–ª–∏–∑—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ç—å—é.
"""


class HHruParser:
    def __init__(self, profession: str, chat_id: int):
        self.profession = profession  # –ò—Å–∫–æ–º–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è
        self.chat_id = chat_id  # ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.running = True  # –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.total_vacancies = 0  # –°—á–µ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π

    async def parse(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
            end_date = datetime.now().replace(
                hour=0, minute=0, second=0, microsecond=0
            )
            start_date = end_date - timedelta(days=DATE_RANGE_DAYS)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
            date_intervals = list(self.date_range(start_date, end_date))
            total_intervals = len(date_intervals)

            all_vacancies = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Å–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
            for i, (date_from, date_to) in enumerate(date_intervals):
                if not self.running:
                    return  # –í—ã—Ö–æ–¥ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                progress = int((i + 1) / total_intervals * 100)
                await self.send_progress(progress)

                vacancies = await self.get_vacancies(
                    date_from=date_from.isoformat(),
                    date_to=date_to.isoformat()
                )

                all_vacancies.extend(vacancies)
                await self.send_status_update(date_from, date_to, len(vacancies))
                await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

            # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            await self.finalize_parsing(all_vacancies)

        except Exception as e:
            await self.handle_error(e)

    async def get_vacancies(self, date_from: str, date_to: str) -> list:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π —á–µ—Ä–µ–∑ API"""
        params = {
            "text": self.profession,
            "area": AREA,
            "date_from": date_from,
            "date_to": date_to,
            "per_page": 100,  # –ú–∞–∫—Å–∏–º—É–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            "page": 0
        }

        vacancies = []
        retries = MAX_RETRIES  # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–µ—Å—Å–∏–∏
        async with aiohttp.ClientSession() as session:
            while self.running and retries > 0:
                try:
                    async with session.get(
                            API_URL,
                            params=params,
                            timeout=aiohttp.ClientTimeout(total=10)
                    ) as response:
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–Ω—ã—Ö –∫–æ–¥–æ–≤
                        if response.status == 403:
                            await self.handle_rate_limit()
                            continue

                        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ HTTP
                        data = await response.json()

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                        vacancies.extend(data.get("items", []))
                        if params["page"] >= data.get("pages", 1) - 1:
                            break

                        params["page"] += 1
                        await asyncio.sleep(REQUEST_DELAY)
                        retries = MAX_RETRIES  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
                except (aiohttp.ClientError, asyncio.TimeoutError) as e:
                    retries -= 1
                    await self.handle_network_error(e, retries)
                except Exception as e:
                    await self.handle_general_error(e)
                    break

        return vacancies

    @staticmethod
    def date_range(start_date: datetime, end_date: datetime,
                   delta: timedelta = timedelta(days=7)):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–∞—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º —à–∞–≥–æ–º"""
        current_date = start_date
        while current_date < end_date:
            next_date = min(current_date + delta, end_date)
            yield (current_date, next_date)
            current_date = next_date

    async def save_to_excel(self, vacancies: list) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = []
        for item in vacancies:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            salary = item.get("salary") or {}
            employer = item.get("employer") or {}
            area = item.get("area") or {}

            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            try:
                pub_date = parser.parse(item.get("published_at", "")).strftime("%d.%m.%Y %H:%M")
            except (ValueError, TypeError):
                pub_date = "N/A"

            data.append({
                "–ù–∞–∑–≤–∞–Ω–∏–µ": item.get("name"),
                "–ö–æ–º–ø–∞–Ω–∏—è": employer.get("name"),
                "–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç": salary.get("from"),
                "–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ": salary.get("to"),
                "–í–∞–ª—é—Ç–∞": salary.get("currency"),
                "–†–µ–≥–∏–æ–Ω": area.get("name"),
                "–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏": pub_date,
                "–°—Å—ã–ª–∫–∞": item.get("alternate_url")
            })

        # –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        safe_name = "".join(
            [c if c.isalnum() or c in ('_', '-') else '_'
             for c in self.profession]).rstrip('_')
        file_name = f"{safe_name}_vacancies.xlsx"

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ pandas
        df = pd.DataFrame(data)
        with pd.ExcelWriter(file_name, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, sheet_name='–í–∞–∫–∞–Ω—Å–∏–∏')

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        wb = load_workbook(file_name)
        ws = wb.active
        tab = Table(displayName="VacanciesTable", ref=f"A1:H{len(data) + 1}")
        tab.tableStyleInfo = TableStyleInfo(
            name="TableStyleMedium9",
            showRowStripes=True
        )
        ws.add_table(tab)
        wb.save(file_name)

        return file_name

    async def send_progress(self, progress: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"""
        try:
            await bot.send_message(
                self.chat_id,
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}")

    async def send_status_update(self, date_from, date_to, count):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π"""
        await bot.send_message(
            self.chat_id,
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {date_from.date()} - {date_to.date()}\n"
            f"üîç –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {count}"
        )

    async def finalize_parsing(self, vacancies):
        """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        if vacancies:
            file_path = await self.save_to_excel(vacancies)
            await self.send_results(file_path, len(vacancies))
            os.remove(file_path)  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        else:
            await bot.send_message(
                self.chat_id,
                "üòû –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π"
            )

    async def send_results(self, file_path, count):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        await bot.send_document(
            self.chat_id,
            FSInputFile(file_path),
            caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {count}"
        )

    async def handle_error(self, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫"""
        await bot.send_message(
            self.chat_id,
            f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(error)}"
        )

    async def handle_rate_limit(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        await bot.send_message(
            self.chat_id,
            "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤! –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥..."
        )
        await asyncio.sleep(10)

    async def handle_network_error(self, error, retries):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫"""
        await bot.send_message(
            self.chat_id,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(error)}\n"
            f"–ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {retries}"
        )
        await asyncio.sleep(5)

    async def handle_general_error(self, error):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫"""
        await bot.send_message(
            self.chat_id,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(error)}"
        )

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self.running = False


# ==============================================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram
# ==============================================

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üîç –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π —Å hh.ru!\n"
        "üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /parse –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞"
    )


@dp.message(Command("parse"))
async def cmd_parse(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /parse"""
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    )
    await state.set_state(ParseStates.waiting_for_profession)


@dp.message(ParseStates.waiting_for_profession)
async def process_profession(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    profession = message.text.strip()
    if not profession:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏!")
        return

    await state.clear()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    msg = await message.answer("‚è≥ –ò–¥–µ—Ç –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π...")
    parser = HHruParser(profession, message.chat.id)
    task = asyncio.create_task(parser.parse())

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await task
    await msg.delete()


@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")


# ==============================================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ==============================================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
